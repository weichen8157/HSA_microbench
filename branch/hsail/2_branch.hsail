module &_tmp_cloc32227_2_branch_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_vector_copy_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %in,
	kernarg_u64 %out,
	kernarg_u32 %iter,
	kernarg_u32 %element)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_vector_copy_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:in:u32:1:1:96:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:out:u32:1:1:112:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "value:iter:u32:1:1:128";
	pragma "AMD RTI", "constarg:8:iter";
	pragma "AMD RTI", "value:element:u32:1:1:144";
	pragma "AMD RTI", "constarg:9:element";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:int*";
	pragma "AMD RTI", "reflection:7:int*";
	pragma "AMD RTI", "reflection:8:int";
	pragma "AMD RTI", "reflection:9:int";
	pragma "AMD RTI", "ARGEND:__OpenCL_vector_copy_kernel";

@__OpenCL_vector_copy_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%__global_offset_0];
	add_u64	$d0, $d0, $d1;
	cvt_u32_u64	$s0, $d0;
	shr_u32	$s1, $s0, 31;
	add_u32	$s1, $s0, $s1;
	and_b32	$s1, $s1, 4294967294;
	ld_kernarg_align(8)_width(all)_u64	$d0, [%out];
	sub_u32	$s1, $s0, $s1;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%in];
	cmp_ne_b1_s32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_1;
	// BB#4:
	cvt_s64_s32	$d1, $s0;
	shl_u64	$d1, $d1, 2;
	add_u64	$d2, $d2, $d1;
	ld_global_align(4)_u32	$s0, [$d2];
	cvt_s64_s32	$d2, $s0;
	mov_b32	$s0, 1000;

@BB0_5:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d2, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_5;
	br	@BB0_6;

@BB0_1:
	cmp_ne_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_7;
	// BB#2:
	cvt_s64_s32	$d1, $s0;
	shl_u64	$d1, $d1, 2;
	add_u64	$d2, $d2, $d1;
	ld_global_align(4)_u32	$s0, [$d2];
	cvt_s64_s32	$d2, $s0;
	mov_b32	$s0, 1000;

@BB0_3:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d2, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_3;

@BB0_6:
	// %fun.exit3
	add_u64	$d0, $d0, $d1;
	st_global_align(4)_u32	$s1, [$d0];

@BB0_7:
	ret;
};
