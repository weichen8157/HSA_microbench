module &_tmp_cloc5094_32_branch_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_vector_copy_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %in,
	kernarg_u64 %out,
	kernarg_u32 %iter,
	kernarg_u32 %element)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_vector_copy_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:in:u32:1:1:96:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:out:u32:1:1:112:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "value:iter:u32:1:1:128";
	pragma "AMD RTI", "constarg:8:iter";
	pragma "AMD RTI", "value:element:u32:1:1:144";
	pragma "AMD RTI", "constarg:9:element";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:int*";
	pragma "AMD RTI", "reflection:7:int*";
	pragma "AMD RTI", "reflection:8:int";
	pragma "AMD RTI", "reflection:9:int";
	pragma "AMD RTI", "ARGEND:__OpenCL_vector_copy_kernel";

@__OpenCL_vector_copy_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%__global_offset_0];
	add_u64	$d0, $d0, $d1;
	cvt_u32_u64	$s0, $d0;
	shr_s32	$s1, $s0, 31;
	shr_u32	$s1, $s1, 27;
	add_u32	$s1, $s0, $s1;
	ld_kernarg_align(8)_width(all)_u64	$d0, [%out];
	and_b32	$s1, $s1, 4294967264;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%in];
	sub_u32	$s1, $s0, $s1;
	cmp_gt_b1_u32	$c0, $s1, 15;
	cbr_b1	$c0, @BB0_40;
	// BB#1:
	cmp_gt_b1_u32	$c0, $s1, 7;
	cbr_b1	$c0, @BB0_21;
	// BB#2:
	cmp_gt_b1_u32	$c0, $s1, 3;
	cbr_b1	$c0, @BB0_12;
	// BB#3:
	cmp_gt_b1_u32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_8;
	// BB#4:
	cmp_ne_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_5;
	// BB#79:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_80:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_80;
	br	@BB0_111;

@BB0_40:
	cmp_gt_b1_u32	$c0, $s1, 23;
	cbr_b1	$c0, @BB0_60;
	// BB#41:
	cmp_gt_b1_u32	$c0, $s1, 19;
	cbr_b1	$c0, @BB0_51;
	// BB#42:
	cmp_gt_b1_u32	$c0, $s1, 17;
	cbr_b1	$c0, @BB0_47;
	// BB#43:
	cmp_ne_b1_s32	$c0, $s1, 16;
	cbr_b1	$c0, @BB0_44;
	// BB#95:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_96:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_96;
	br	@BB0_111;

@BB0_21:
	cmp_gt_b1_u32	$c0, $s1, 11;
	cbr_b1	$c0, @BB0_31;
	// BB#22:
	cmp_gt_b1_u32	$c0, $s1, 9;
	cbr_b1	$c0, @BB0_27;
	// BB#23:
	cmp_ne_b1_s32	$c0, $s1, 8;
	cbr_b1	$c0, @BB0_24;
	// BB#87:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_88:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_88;
	br	@BB0_111;

@BB0_60:
	cmp_gt_b1_u32	$c0, $s1, 27;
	cbr_b1	$c0, @BB0_70;
	// BB#61:
	cmp_gt_b1_u32	$c0, $s1, 25;
	cbr_b1	$c0, @BB0_66;
	// BB#62:
	cmp_ne_b1_s32	$c0, $s1, 24;
	cbr_b1	$c0, @BB0_63;
	// BB#103:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_104:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_104;
	br	@BB0_111;

@BB0_12:
	cmp_gt_b1_u32	$c0, $s1, 5;
	cbr_b1	$c0, @BB0_17;
	// BB#13:
	cmp_ne_b1_s32	$c0, $s1, 4;
	cbr_b1	$c0, @BB0_14;
	// BB#83:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_84:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_84;
	br	@BB0_111;

@BB0_51:
	cmp_gt_b1_u32	$c0, $s1, 21;
	cbr_b1	$c0, @BB0_56;
	// BB#52:
	cmp_ne_b1_s32	$c0, $s1, 20;
	cbr_b1	$c0, @BB0_53;
	// BB#99:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_100:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_100;
	br	@BB0_111;

@BB0_31:
	cmp_gt_b1_u32	$c0, $s1, 13;
	cbr_b1	$c0, @BB0_36;
	// BB#32:
	cmp_ne_b1_s32	$c0, $s1, 12;
	cbr_b1	$c0, @BB0_33;
	// BB#91:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_92:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_92;
	br	@BB0_111;

@BB0_70:
	cmp_gt_b1_u32	$c0, $s1, 29;
	cbr_b1	$c0, @BB0_75;
	// BB#71:
	cmp_ne_b1_s32	$c0, $s1, 28;
	cbr_b1	$c0, @BB0_72;
	// BB#107:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_108:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_108;
	br	@BB0_111;

@BB0_8:
	cmp_ne_b1_s32	$c0, $s1, 2;
	cbr_b1	$c0, @BB0_9;
	// BB#81:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_82:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_82;
	br	@BB0_111;

@BB0_47:
	cmp_ne_b1_s32	$c0, $s1, 18;
	cbr_b1	$c0, @BB0_48;
	// BB#97:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_98:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_98;
	br	@BB0_111;

@BB0_27:
	cmp_ne_b1_s32	$c0, $s1, 10;
	cbr_b1	$c0, @BB0_28;
	// BB#89:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_90:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_90;
	br	@BB0_111;

@BB0_66:
	cmp_ne_b1_s32	$c0, $s1, 26;
	cbr_b1	$c0, @BB0_67;
	// BB#105:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_106:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_106;
	br	@BB0_111;

@BB0_17:
	cmp_ne_b1_s32	$c0, $s1, 6;
	cbr_b1	$c0, @BB0_18;
	// BB#85:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_86:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_86;
	br	@BB0_111;

@BB0_56:
	cmp_ne_b1_s32	$c0, $s1, 22;
	cbr_b1	$c0, @BB0_57;
	// BB#101:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_102:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_102;
	br	@BB0_111;

@BB0_36:
	cmp_ne_b1_s32	$c0, $s1, 14;
	cbr_b1	$c0, @BB0_37;
	// BB#93:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_94:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_94;
	br	@BB0_111;

@BB0_75:
	cmp_ne_b1_s32	$c0, $s1, 30;
	cbr_b1	$c0, @BB0_76;
	// BB#109:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_110:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_110;
	br	@BB0_111;

@BB0_5:
	cmp_ne_b1_s32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_112;
	// BB#6:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_7:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_7;
	br	@BB0_111;

@BB0_44:
	cmp_ne_b1_s32	$c0, $s1, 17;
	cbr_b1	$c0, @BB0_112;
	// BB#45:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_46:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_46;
	br	@BB0_111;

@BB0_24:
	cmp_ne_b1_s32	$c0, $s1, 9;
	cbr_b1	$c0, @BB0_112;
	// BB#25:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_26:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_26;
	br	@BB0_111;

@BB0_63:
	cmp_ne_b1_s32	$c0, $s1, 25;
	cbr_b1	$c0, @BB0_112;
	// BB#64:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_65:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_65;
	br	@BB0_111;

@BB0_14:
	cmp_ne_b1_s32	$c0, $s1, 5;
	cbr_b1	$c0, @BB0_112;
	// BB#15:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_16:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_16;
	br	@BB0_111;

@BB0_53:
	cmp_ne_b1_s32	$c0, $s1, 21;
	cbr_b1	$c0, @BB0_112;
	// BB#54:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_55:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_55;
	br	@BB0_111;

@BB0_33:
	cmp_ne_b1_s32	$c0, $s1, 13;
	cbr_b1	$c0, @BB0_112;
	// BB#34:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_35:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_35;
	br	@BB0_111;

@BB0_72:
	cmp_ne_b1_s32	$c0, $s1, 29;
	cbr_b1	$c0, @BB0_112;
	// BB#73:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_74:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_74;
	br	@BB0_111;

@BB0_9:
	cmp_ne_b1_s32	$c0, $s1, 3;
	cbr_b1	$c0, @BB0_112;
	// BB#10:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_11:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_11;
	br	@BB0_111;

@BB0_48:
	cmp_ne_b1_s32	$c0, $s1, 19;
	cbr_b1	$c0, @BB0_112;
	// BB#49:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_50:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_50;
	br	@BB0_111;

@BB0_28:
	cmp_ne_b1_s32	$c0, $s1, 11;
	cbr_b1	$c0, @BB0_112;
	// BB#29:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_30:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_30;
	br	@BB0_111;

@BB0_67:
	cmp_ne_b1_s32	$c0, $s1, 27;
	cbr_b1	$c0, @BB0_112;
	// BB#68:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_69:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_69;
	br	@BB0_111;

@BB0_18:
	cmp_ne_b1_s32	$c0, $s1, 7;
	cbr_b1	$c0, @BB0_112;
	// BB#19:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_20:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_20;
	br	@BB0_111;

@BB0_57:
	cmp_ne_b1_s32	$c0, $s1, 23;
	cbr_b1	$c0, @BB0_112;
	// BB#58:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_59:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_59;
	br	@BB0_111;

@BB0_37:
	cmp_ne_b1_s32	$c0, $s1, 15;
	cbr_b1	$c0, @BB0_112;
	// BB#38:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_39:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_39;
	br	@BB0_111;

@BB0_76:
	cmp_ne_b1_s32	$c0, $s1, 31;
	cbr_b1	$c0, @BB0_112;
	// BB#77:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_78:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_78;

@BB0_111:
	// %fun.exit6
	add_u64	$d0, $d0, $d2;
	st_global_align(4)_u32	$s1, [$d0];

@BB0_112:
	ret;
};
