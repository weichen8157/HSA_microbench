module &_tmp_cloc32297_16_branch_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_vector_copy_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %in,
	kernarg_u64 %out,
	kernarg_u32 %iter,
	kernarg_u32 %element)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_vector_copy_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:in:u32:1:1:96:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:out:u32:1:1:112:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "value:iter:u32:1:1:128";
	pragma "AMD RTI", "constarg:8:iter";
	pragma "AMD RTI", "value:element:u32:1:1:144";
	pragma "AMD RTI", "constarg:9:element";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:int*";
	pragma "AMD RTI", "reflection:7:int*";
	pragma "AMD RTI", "reflection:8:int";
	pragma "AMD RTI", "reflection:9:int";
	pragma "AMD RTI", "ARGEND:__OpenCL_vector_copy_kernel";

@__OpenCL_vector_copy_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%__global_offset_0];
	add_u64	$d0, $d0, $d1;
	cvt_u32_u64	$s0, $d0;
	shr_s32	$s1, $s0, 31;
	shr_u32	$s1, $s1, 28;
	add_u32	$s1, $s0, $s1;
	ld_kernarg_align(8)_width(all)_u64	$d0, [%out];
	and_b32	$s1, $s1, 4294967280;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%in];
	sub_u32	$s1, $s0, $s1;
	cmp_gt_b1_u32	$c0, $s1, 7;
	cbr_b1	$c0, @BB0_20;
	// BB#1:
	cmp_gt_b1_u32	$c0, $s1, 3;
	cbr_b1	$c0, @BB0_11;
	// BB#2:
	cmp_gt_b1_u32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_7;
	// BB#3:
	cmp_ne_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_4;
	// BB#39:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_40:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_40;
	br	@BB0_55;

@BB0_20:
	cmp_gt_b1_u32	$c0, $s1, 11;
	cbr_b1	$c0, @BB0_30;
	// BB#21:
	cmp_gt_b1_u32	$c0, $s1, 9;
	cbr_b1	$c0, @BB0_26;
	// BB#22:
	cmp_ne_b1_s32	$c0, $s1, 8;
	cbr_b1	$c0, @BB0_23;
	// BB#47:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_48:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_48;
	br	@BB0_55;

@BB0_11:
	cmp_gt_b1_u32	$c0, $s1, 5;
	cbr_b1	$c0, @BB0_16;
	// BB#12:
	cmp_ne_b1_s32	$c0, $s1, 4;
	cbr_b1	$c0, @BB0_13;
	// BB#43:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_44:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_44;
	br	@BB0_55;

@BB0_30:
	cmp_gt_b1_u32	$c0, $s1, 13;
	cbr_b1	$c0, @BB0_35;
	// BB#31:
	cmp_ne_b1_s32	$c0, $s1, 12;
	cbr_b1	$c0, @BB0_32;
	// BB#51:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_52:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_52;
	br	@BB0_55;

@BB0_7:
	cmp_ne_b1_s32	$c0, $s1, 2;
	cbr_b1	$c0, @BB0_8;
	// BB#41:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_42:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_42;
	br	@BB0_55;

@BB0_26:
	cmp_ne_b1_s32	$c0, $s1, 10;
	cbr_b1	$c0, @BB0_27;
	// BB#49:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_50:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_50;
	br	@BB0_55;

@BB0_16:
	cmp_ne_b1_s32	$c0, $s1, 6;
	cbr_b1	$c0, @BB0_17;
	// BB#45:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_46:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_46;
	br	@BB0_55;

@BB0_35:
	cmp_ne_b1_s32	$c0, $s1, 14;
	cbr_b1	$c0, @BB0_36;
	// BB#53:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_54:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_54;
	br	@BB0_55;

@BB0_4:
	cmp_ne_b1_s32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_56;
	// BB#5:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_6:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_6;
	br	@BB0_55;

@BB0_23:
	cmp_ne_b1_s32	$c0, $s1, 9;
	cbr_b1	$c0, @BB0_56;
	// BB#24:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_25:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_25;
	br	@BB0_55;

@BB0_13:
	cmp_ne_b1_s32	$c0, $s1, 5;
	cbr_b1	$c0, @BB0_56;
	// BB#14:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_15:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_15;
	br	@BB0_55;

@BB0_32:
	cmp_ne_b1_s32	$c0, $s1, 13;
	cbr_b1	$c0, @BB0_56;
	// BB#33:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_34:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_34;
	br	@BB0_55;

@BB0_8:
	cmp_ne_b1_s32	$c0, $s1, 3;
	cbr_b1	$c0, @BB0_56;
	// BB#9:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_10:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_10;
	br	@BB0_55;

@BB0_27:
	cmp_ne_b1_s32	$c0, $s1, 11;
	cbr_b1	$c0, @BB0_56;
	// BB#28:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_29:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_29;
	br	@BB0_55;

@BB0_17:
	cmp_ne_b1_s32	$c0, $s1, 7;
	cbr_b1	$c0, @BB0_56;
	// BB#18:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_19:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_19;
	br	@BB0_55;

@BB0_36:
	cmp_ne_b1_s32	$c0, $s1, 15;
	cbr_b1	$c0, @BB0_56;
	// BB#37:
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	ld_global_align(4)_u32	$s0, [$d1];
	cvt_s64_s32	$d1, $s0;
	mov_b32	$s0, 1000;

@BB0_38:
	shl_u32	$s1, $s1, 2;
	cvt_u64_u32	$d3, $s1;
	add_u64	$d3, $d1, $d3;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, 4294967295;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_38;

@BB0_55:
	// %fun.exit6
	add_u64	$d0, $d0, $d2;
	st_global_align(4)_u32	$s1, [$d0];

@BB0_56:
	ret;
};
