ShaderType = IL_SHADER_COMPUTE
TargetChip = t



; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00000001 SCOption_C0
u32SCOptions[1] = 0x00000000
u32SCOptions[2] = 0x04000000 SCOption_R1000_DISABLE_INDEXED_RESOURCE_TYPE_CHECK
u32SCOptions[3] = 0x00001F00 SCOption_R1100_STORE_COALESCE_WORKAROUND_BUG452151 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_UBTS463396_RANGE_CHECK_FOR_VMEMOP SCOption_UBTS463071_RANGE_CHECK_FOR_SMRD SCOption_R1100_FLAT_SCRATCH_OOB_WORKAROUND_BUG379895
u32SCOptions[4] = 0x00800000 SCOption_R1000_SGPR_TRAP_REGISTERS
; -------- Disassembly --------------------
shader main
  asic(CI)
  type(CS)

  s_load_dword  s7, s[4:5], 0x10                        // 000000000000: C0038510
  s_waitcnt     lgkmcnt(0)                              // 000000000004: BF8C007F
  v_cmp_lt_i32  s[8:9], s7, 1                           // 000000000008: D1020008 00010207
  s_mov_b64     s[10:11], exec                          // 000000000010: BE8A047E
  s_andn2_b64   exec, s[10:11], s[8:9]                  // 000000000014: 8AFE080A
  s_cbranch_execz  label_0047                           // 000000000018: BF880040
  s_load_dwordx2  s[4:5], s[4:5], 0x0e                  // 00000000001C: C042050E
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  v_mov_b32     v0, s4                                  // 000000000024: 7E000204
  v_readfirstlane_b32  s8, v0                           // 000000000028: 7E100500
  v_mov_b32     v0, s5                                  // 00000000002C: 7E000205
  v_readfirstlane_b32  s9, v0                           // 000000000030: 7E120500
  s_load_dword  s8, s[8:9], 0x00                        // 000000000034: C0040900
  s_mov_b64     s[12:13], exec                          // 000000000038: BE8C047E
  s_mov_b64     s[14:15], exec                          // 00000000003C: BE8E047E
  v_mov_b32     v0, 0                                   // 000000000040: 7E000280
  s_waitcnt     lgkmcnt(0)                              // 000000000044: BF8C007F
  v_mov_b32     v1, s8                                  // 000000000048: 7E020208
label_0013:
  v_ashrrev_i32  v2, 31, v0                             // 00000000004C: 3004009F
  v_mov_b32     v3, v2                                  // 000000000050: 7E060302
  v_mov_b32     v2, v0                                  // 000000000054: 7E040300
  v_mov_b32     v4, 0                                   // 000000000058: 7E080280
  v_mov_b32     v5, 0                                   // 00000000005C: 7E0A0280
  s_mov_b64     s[8:9], exec                            // 000000000060: BE88047E
  s_mov_b64     s[16:17], exec                          // 000000000064: BE90047E
  v_mov_b32     v6, v5                                  // 000000000068: 7E0C0305
  v_mov_b32     v5, v4                                  // 00000000006C: 7E0A0304
  v_mov_b32     v4, 0x00000080                          // 000000000070: 7E0802FF 00000080
label_001E:
  v_mov_b32     v7, 1                                   // 000000000078: 7E0E0281
  buffer_store_dword  v7, v5, s[0:3], s6 offen          // 00000000007C: E0701000 06000705
  v_lshl_b64    v[7:8], v[2:3], 2                       // 000000000084: D2C20007 00010502
  buffer_load_dword  v7, v7, s[0:3], s6 offen           // 00000000008C: E0301000 06000707
  s_waitcnt     vmcnt(0)                                // 000000000094: BF8C0F70
  v_add_i32     v1, vcc, v1, v7                         // 000000000098: 4A020F01
  v_add_i32     v5, s[18:19], v5, 4                     // 00000000009C: D24A1205 00010905
  v_addc_u32    v6, vcc, v6, 0, s[18:19]                // 0000000000A4: D2506A06 00490106
  v_add_i32     v4, vcc, -1, v4                         // 0000000000AC: 4A0808C1
  v_cmp_ne_i32  s[18:19], v4, 0                         // 0000000000B0: D10A0012 00010104
  s_mov_b64     s[20:21], exec                          // 0000000000B8: BE94047E
  s_andn2_b64   exec, s[20:21], s[18:19]                // 0000000000BC: 8AFE1214
  s_cbranch_execz  label_0033                           // 0000000000C0: BF880002
  s_andn2_b64   s[16:17], s[16:17], exec                // 0000000000C4: 8A907E10
  s_cbranch_scc0  label_0035                            // 0000000000C8: BF840002
label_0033:
  s_and_b64     exec, s[20:21], s[16:17]                // 0000000000CC: 87FE1014
  s_branch      label_001E                              // 0000000000D0: BF82FFE9
label_0035:
  s_mov_b64     exec, s[8:9]                            // 0000000000D4: BEFE0408
  v_add_i32     v0, vcc, 1, v0                          // 0000000000D8: 4A000081
  v_cmp_ne_i32  s[8:9], v0, s7                          // 0000000000DC: D10A0008 00000F00
  s_mov_b64     s[16:17], exec                          // 0000000000E4: BE90047E
  s_andn2_b64   exec, s[16:17], s[8:9]                  // 0000000000E8: 8AFE0810
  s_cbranch_execz  label_003E                           // 0000000000EC: BF880002
  s_andn2_b64   s[14:15], s[14:15], exec                // 0000000000F0: 8A8E7E0E
  s_cbranch_scc0  label_0040                            // 0000000000F4: BF840002
label_003E:
  s_and_b64     exec, s[16:17], s[14:15]                // 0000000000F8: 87FE0E10
  s_branch      label_0013                              // 0000000000FC: BF82FFD3
label_0040:
  s_mov_b64     exec, s[12:13]                          // 000000000100: BEFE040C
  v_mov_b32     v0, s4                                  // 000000000104: 7E000204
  v_mov_b32     v2, s5                                  // 000000000108: 7E040205
  v_mov_b32     v3, v2                                  // 00000000010C: 7E060302
  v_mov_b32     v2, v0                                  // 000000000110: 7E040300
  flat_store_dword  v[2:3], v1                          // 000000000114: DC700000 00000102
label_0047:
  s_endpgm                                              // 00000000011C: BF810000
end

; ----------------- CS Data ------------------------

codeLenInByte        = 544 bytes;
objectHeaderByteSize = 256 bytes;

; launchModeFlags    = 0x00000200
isAql                = TRUE;

userElementCount     = 0;
extUserElementCount  = 0;
NumVgprs             = 9;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 1;
FlatPtr32            = 0;
ScratchSize          = 128 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

;COMPUTE_PGM_RSRC2       = 0x0000000D
COMPUTE_PGM_RSRC2:SCRATCH_EN     = 1
COMPUTE_PGM_RSRC2:USER_SGPR      = 6
; ---------------------------- AMD Code Descriptor ----------------------------
amd_kernel_code_version_major                  = 1
amd_kernel_code_version_minor                  = 0
amd_machine_kind                               = AMD_MACHINE_KIND_AMDGPU
amd_machine_version_major                      = 0
amd_machine_version_minor                      = 0
amd_machine_version_stepping                   = 0
kernel_code_entry_byte_offset                  = 256
max_scratch_backing_memory_byte_size           = 0
; compute_pgm_rsrc1:
  granulated_workitem_vgpr_count                       = 2
  granulated_wavefront_sgpr_count                      = 2
  priority                                             = 0
  float_mode_round_32                                  = ROUND_TO_NEAREST_EVEN
  float_mode_round_16_64                               = ROUND_TO_NEAREST_EVEN
  float_mode_denorm_32                                 = FLUSH_SOURCE_OUTPUT
  float_mode_denorm_16_64                              = FLUSH_NONE
  enable_ieee_mode                                     = TRUE
; compute_pgm_rsrc2:
  enable_sgpr_private_segment_wave_byte_offset         = TRUE
  user_sgpr_count                                      = 6
  enable_vgpr_workitem_id                              = X
  granulated_lds_size                                  = 0
enable_sgpr_private_segment_buffer             = TRUE
enable_sgpr_kernarg_segment_ptr                = TRUE
private_element_size                           = DWORD (4 bytes)
is_ptr64                                       = TRUE
workitem_private_segment_byte_size             = 512
gds_segment_byte_size                          = 0
kernarg_segment_byte_size                      = 72
wavefront_sgpr_count                           = 24
workitem_vgpr_count                            = 9
kernarg_segment_alignment                      = 3
private_segment_alignment                      = 2
wavefront_size                                 = 6
