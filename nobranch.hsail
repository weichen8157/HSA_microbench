//
// Generated by LLVM Hsail Back-End
//

version 1:0:$small;


//	.globl	fun
                                        // @fun
function &fun (arg_u32 %func_retval0) (
	arg_u32 %fun_kernarg_0
)
{
@BEGIN:


// BB#0:                                // %entry
	ld_arg_u32 	$s0, [%fun_kernarg_0];
	mov_b32 	$s1, 1000;
                                        // implicit-def: S2
	brn 	@BB0_1;                 // %for.body
                                        // =>This Inner Loop Header: Depth=1
@BB0_1:
	shl_s32 	$s2, $s2, 2;
	add_s32 	$s2, $s0, $s2;
	add_s32 	$s1, $s1, -1;
	cmp_ne_b1_s32 	$c0, $s1, 0;
	cbr 	$c0, @BB0_1;
// BB#2:                                // %for.end
	st_kernarg_u32	[%func_retval0+0], $s2;
	ret;
};

//	.globl	vector_copy
kernel &vector_copy(
	kernarg_u32 %vector_copy_kernarg_0,
	kernarg_u32 %vector_copy_kernarg_1,
	kernarg_u32 %vector_copy_kernarg_2,
	kernarg_u32 %vector_copy_kernarg_3
)                                       // @vector_copy
{
@BEGIN:


// BB#0:                                // %entry
	ld_kernarg_u32 	$s2, [%vector_copy_kernarg_0];
	ld_kernarg_u32 	$s0, [%vector_copy_kernarg_1];
	workgroupid 	$s1, 0;
	workgroupsize 	$s3, 0;
	workitemid 	$s4, 0;
	mad_u32 	$s1, $s3, $s1, $s4;
	shl_s32 	$s1, $s1, 2;
	add_s32 	$s2, $s2, $s1;
	ld_global_u32 	$s2, [$s2];
	mov_b32 	$s4, 1000;
                                        // implicit-def: S3
	brn 	@BB1_1;                 // %for.body.i
                                        // =>This Inner Loop Header: Depth=1
@BB1_1:
	shl_s32 	$s3, $s3, 2;
	add_s32 	$s3, $s2, $s3;
	add_s32 	$s4, $s4, -1;
	cmp_ne_b1_s32 	$c0, $s4, 0;
	cbr 	$c0, @BB1_1;
// BB#2:                                // %fun.exit
	add_s32 	$s0, $s0, $s1;
	st_global_u32 	$s3, [$s0];
	ret;
};

